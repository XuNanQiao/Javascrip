1.什么是正则表达式
正则表达式就是用于描述复杂规则的字符串的工具。换句话说，正则表达式就是记录文本规则的代码。

2。正则表达式的语法格式。
正则表达式的形式一般如下：　　

/love/　　其中位于“/”定界符之间的部分就是将要在目标对象中进行匹配的模式。用户只要把希望查找匹配对象的模式内容放入“/”定界符之间即可。为了能够使用户更加灵活的定制模式内容，正则表达式提供了专门的“元字符”。所谓元字符就是指那些在正则表达式中具有特殊意义的专用字符，可以用来规定其前导字符（即位于元字符前面的字符）在目标对象中的出现模式。
较为常用的元字符包括： “+”， “*”，以及 “?”。

“+”元字符规定其前导字符必须在目标对象中连续出现一次或多次。

“*”元字符规定其前导字符必须在目标对象中出现零次或连续多次。

“?”元字符规定其前导对象必须在目标对象中连续出现零次或一次。

下面，就让我们来看一下正则表达式元字符的具体应用。

/fo+/　　因为上述正则表达式中包含“+”元字符，表示可以与目标对象中的 “fool”, “fo”, 或者 “football”等在字母f后面连续出现一个或多个字母o的字符串相匹配。

/eg*/　　因为上述正则表达式中包含“*”元字符，表示可以与目标对象中的 “easy”, “ego”, 或者 “egg”等在字母e后面连续出现零个或多个字母g的字符串相匹配。

/Wil?/　　因为上述正则表达式中包含“？”元字符，表示可以与目标对象中的 “Win”, 或者“Wilson”,等在字母i后面连续出现零个或一个字母l的字符串相匹配。

有时候不知道要匹配多少字符。为了能适应这种不确定性，正则表达式支持限定符的概念。这些限定符可以指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。

{n} n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。

{n,} n 是一个非负整数。至少匹配 n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。

{n,m} m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。

3。其它几个重要的元字符的使用方式。

 1. \s：用于匹配单个空格符，包括tab键和换行符；   
   2. \S：用于匹配除单个空格符之外的所有字符；   
   3. \d：用于匹配从0到9的数字；   
   4. \w：用于匹配字母，数字或下划线字符；   
   5. \W：用于匹配所有与\w不匹配的字符；   
   6. . ：用于匹配除换行符之外的所有字符。

4。正则表达式中还具有另外一种较为独特的专用字符，即定位符。定位符用于规定匹配模式在目标对象中的出现位置。

 1. “^”定位符规定匹配模式必须出现在目标字符串的开头  
   2. “$”定位符规定匹配模式必须出现在目标对象的结尾  
   3. “\b”定位符规定匹配模式必须出现在目标字符串的开头或结尾的两个边界之一  
   4. “\B”定位符则规定匹配对象必须位于目标字符串的开头和结尾两个边界之内，  
   5.       即匹配对象既不能作为目标字符串的开头，也不能作为目标字符串的结尾。  

5。在构造正则表达式之后，就可以象数学表达式一样来求值，也就是说，可以从左至右并按照一个优先级顺序来求值。优先级如下：
代码

   1. 1．\ 转义符  
   2. 2．(), (?, (?=), [] 圆括号和方括号  
   3. 3．*, +, ?, {n}, {n,}, {n,m} 限定符  
   4. 4．^, $, \anymetacharacter 位置和顺序  
   5. 5．|“或”操作  


JavaScript 1.2中有个功能强大的RegExp()对象，可以用来进行正则表达式的匹配操作。其中的test()方法可以检验目标对象中是否包含匹配模式，并相应的返回true或false。

6，常用的正则表达式：
  1。验证用户输入的邮件地址的有效性。
var pattern = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-])+/;  

  2。//校验是否全由数字组成
代码  
   var patrn=^[0-9]*$ ; 

3//校验邮政编码
代码  
    //var patrn=/^[a-zA-Z0-9]{3,12}$/;  
   var patrn=/^[a-zA-Z0-9 ]{3,12}$/;  
   
 4。 //校验用户姓名：只能输入1-30个以字母开头的字串
代码

   1. function isTrueName(s)  
   2. {  
   3. var patrn=/^[a-zA-Z]{1,30}$/;  
   4. if (!patrn.exec(s)) return false  
   5. return true  
   6. }  
   7. }}  

5。//校验密码：只能输入6-20个字母、数字、下划线  
   
  11. function isPasswd(s)  
  12. {  
  13. var patrn=/^(\w){6,20}$/;  
  14. if (!patrn.exec(s)) return false  
  15. return true  
  16. }  